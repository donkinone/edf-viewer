# EDF文件处理应用构建规则

# 项目概述
使用Node.js构建一个Web应用，允许用户上传并查看EDF(European Data Format)文件。
该应用应支持批量上传(最多3个)EDF文件，并显示文件的相关信息，特别是通道数量。

# 项目结构
创建以下目录结构:
- /public 
  - /css - 存放样式文件
  - /js - 存放客户端JavaScript文件
- /views - 存放EJS模板
- /src
  - /utils - 存放工具函数

# 依赖项
- express: Web框架
- multer: 处理文件上传
- ejs: 模板引擎
- edf-parser: 解析EDF文件
- nodemon: 开发依赖，用于热重载

# 服务器配置
- 创建Express服务器
- 配置静态文件服务
- 配置EJS模板引擎
- 设置端口为3000或环境变量

# 文件上传配置
- 使用multer处理文件上传
- 限制文件大小为100MB
- 限制文件类型仅为.edf
- 最多允许同时上传3个文件

# EDF文件处理
- 创建专用模块解析EDF文件
- 提取以下信息:
  - 文件名和文件大小
  - 患者ID和记录ID
  - 开始日期和持续时间
  - 通道数量和通道信息

# 前端界面
- 创建美观的上传界面
- 显示已选择的文件列表
- 添加文件上传进度指示器
- 设计结果显示区域，清晰展示通道信息
- 实现响应式设计，适配不同设备

# API路由
- GET /: 渲染主页
- POST /upload: 处理文件上传
  - 接收最多3个EDF文件
  - 解析每个文件并返回结果

# 客户端JavaScript功能
- 文件选择和预览
- 表单提交和文件上传
- 结果展示和格式化
- 错误处理和用户反馈

# CSS样式要求
- 使用现代设计风格
- 实现响应式布局
- 添加适当的动画和过渡效果
- 确保良好的用户体验

# 项目启动指令
- 正式环境: npm start
- 开发环境: npm run dev

# 性能优化
- 使用内存存储上传的文件，不写入磁盘
- 优化前端资源加载
- 处理大型EDF文件的策略

# 错误处理
- 实现全局错误处理
- 提供用户友好的错误提示
- 记录服务器端错误

# 用户体验建议
- 添加拖放上传功能
- 即时验证文件类型
- 清晰的状态反馈